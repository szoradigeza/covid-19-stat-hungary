{"version":3,"sources":["chart/chart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Chart","fetch","then","response","json","result","country_history_array","stat_by_country","history_data","i","length","new_cases","splited_date","record_date","split","day","console","log","push","setState","total_death_max","Math","max","apply","map","o","total_deaths","active_cases_max","active_cases","total_recovered_max","total_recovered","state","catch","err","this","width","height","data","syncId","margin","top","right","left","bottom","strokeDasharray","dataKey","domain","type","stroke","fill","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5f765545.chunk.js","sourcesContent":["import React from \"react\";\r\n  import {\r\n    AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip,\r\n  } from 'recharts';\r\n  \r\ninterface ChartProp{\r\n\r\n}\r\ninterface ChartState{\r\n    history_data?: any;\r\n    total_death_max: number;\r\n    active_cases_max: number;\r\n    total_recovered_max: number;\r\n}\r\nexport default class Chart extends React.Component<ChartProp, ChartState> {\r\n    componentDidMount() {\r\n        fetch(\"https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_particular_country.php?country=Hungary\", {\r\n\t\"method\": \"GET\",\r\n\t\"headers\": {\r\n        \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n\t\t\"x-rapidapi-key\": \"5f04f06ee1msh0243310213af221p114f19jsnd240b83e3a6f\"\r\n\t}\r\n})\r\n.then(response => response.json())\r\n.then((result) => {\r\n    let country_history_array: any[] =  result.stat_by_country;\r\n    let history_data = [];\r\n    for(let i=0; i<country_history_array.length; i+=20) {\r\n        if(country_history_array[i].new_cases !== '') {\r\n            let splited_date = country_history_array[i].record_date.split('-');\r\n            let day = splited_date[2].split(' ');\r\n            console.log(splited_date);\r\n            country_history_array[i].record_date = splited_date[1] +'-'+ day[0];\r\n            history_data.push(country_history_array[i])\r\n            \r\n        }\r\n    }\r\n            this.setState({total_death_max: Math.max.apply(Math, history_data.map( (o) => { return o.total_deaths ; }))});\r\n            this.setState({active_cases_max: Math.max.apply(Math, history_data.map( (o) => { return o.active_cases ; }))});\r\n            this.setState({total_recovered_max: Math.max.apply(Math, history_data.map( (o) => { return o.total_recovered ; }))});\r\n            console.log(this.state.active_cases_max);\r\n            console.log(this.state.total_death_max);\r\n            console.log(this.state.total_recovered_max);\r\n    this.setState({history_data: history_data});\r\n    console.log(this.state.history_data);\r\n})\r\n.catch(err => {\r\n    console.log(err);\r\n});\r\n    }\r\n    render(){\r\n        if(!this.state){\r\n            return <div><h1>Covid-19</h1></div>\r\n        }\r\n        return(\r\n            <div>\r\n                <p>Active Cases</p>\r\n      <AreaChart\r\n          width={1200}\r\n          height={150}\r\n          data={this.state.history_data}\r\n          syncId=\"anyId\"\r\n          margin={{\r\n            top: 10, right: 30, left: 0, bottom: 0,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"record_date\" />\r\n          <YAxis domain={[0, this.state.active_cases_max]}/>\r\n          <Tooltip />\r\n          <Area type=\"monotone\" dataKey=\"active_cases\" stroke=\"#8884d8\" fill=\"#8884d8\" />\r\n        </AreaChart>\r\n        <p>Total deths</p>\r\n        <AreaChart\r\n          width={1200}\r\n          height={150}\r\n          data={this.state.history_data}\r\n          syncId=\"anyId\"\r\n          margin={{\r\n            top: 10, right: 30, left: 0, bottom: 0,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"record_date\"/>\r\n          <YAxis type=\"number\" domain={[0, this.state.total_death_max]}/>\r\n          <Tooltip />\r\n          <Area type=\"monotone\" dataKey=\"total_deaths\" stroke=\"#ff0040\" fill=\"#ff0000\" />\r\n        </AreaChart>\r\n        <p>Total recovered</p>\r\n        <AreaChart\r\n          width={1200}\r\n          height={150}\r\n          data={this.state.history_data}\r\n          syncId=\"anyId\"\r\n          margin={{\r\n            top: 10, right: 30, left: 0, bottom: 0,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"record_date\" />\r\n          <YAxis domain={[0, this.state.total_recovered_max]}/>\r\n          <Tooltip />\r\n          <Area type=\"monotone\" dataKey=\"total_recovered\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\r\n        </AreaChart>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chart from './chart/chart'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}